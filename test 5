1.	Write a program to print n prime numbers after nth Prime number

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the value of N:");
        int n = scanner.nextInt();

        if (n <= 0) {
            System.out.println("N should be a positive integer.");
            return;
        }

        int count = 0;
        int num = 2;

        while (true) {
            if (isPrime(num)) {
                count++;
                if (count == n) {
                    System.out.println(n + "rd Prime number is " + num);
                    break;
                }
            }
            num++;
        }

        System.out.print(n + " prime numbers after " + num + " are: ");
        for (int i = 0; i < n; i++) {
            num++;
            while (!isPrime(num)) {
                num++;
            }
            System.out.print(num + " ");
        }
    }

    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

2.PERFECT NUMBERS IN THE GIVEN RANGE

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PerfectSquares {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter lower range: ");
        int lowerRange = scanner.nextInt();

        System.out.print("Enter upper range: ");
        int upperRange = scanner.nextInt();

        List<Integer> perfectSquares = new ArrayList<>();

        for (int i = lowerRange; i <= upperRange; i++) {
            if (isPerfectSquare(i) && sumOfDigits(i) < 10) {
                perfectSquares.add(i);
            }
        }

        System.out.println(perfectSquares);
    }

    public static boolean isPerfectSquare(int num) {
        int sqrt = (int) Math.sqrt(num);
        return sqrt * sqrt == num;
    }

    public static int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
}
